{"version":3,"sources":["logo.svg","chatbox/avatar.svg","chatbox/Chatbox.js","App.js","reportWebVitals.js","index.js"],"names":["bot","BotScript","request","Request","ReplyComponent","msg","this","props","reply","speechResponse","parse","Component","handleNewUserMessage","a","handleAsync","enter","renderCustomComponent","botId","document","querySelector","getAttribute","urlParams","URLSearchParams","window","location","search","get","init","Chatbox","useEffect","initBot","subtitle","profileAvatar","logo","App","className","src","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6OAAe,G,OAAA,IAA0B,kC,+FCA1B,G,cAAA,IAA0B,oC,QCWnCA,EAAM,IAAIC,YACVC,EAAU,IAAIC,UAKdC,E,4JACJ,WACE,IAAIC,EAAMC,KAAKC,MAAMC,MAAMC,eAC3B,OAAO,8BAAMC,YAAML,S,GAHMM,a,SAWdC,E,8EAAf,WAAoCP,GAApC,eAAAQ,EAAA,sEACsBb,EAAIc,YAAYZ,EAAQa,MAAMV,IADpD,OACQG,EADR,OAEEQ,gCAAsBZ,EAAgB,CAACI,UAAQ,GAFjD,4C,kEAaA,WAAuBS,GAAvB,iBAAAJ,EAAA,6DACe,MAATI,IAGkD,MAAhDC,SAASC,cAAc,sBACzBF,EAAK,UAAGC,SAASC,cAAc,6BAA1B,aAAG,EAA8CC,aAAa,eAG7DC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDR,EAAQI,EAAUK,IAAI,SAIrBT,IACHA,EAAQ,cAIVjB,EAAIU,MAAJ,gNAIMO,EAAQ,iCAAmCA,EAAQ,GAJzD,WAlBF,SAwBQjB,EAAI2B,OAxBZ,4C,sBAwCeC,MAbf,WAIE,OAHAC,qBAAU,Y,oCACRC,MAGA,cAAC,SAAD,CACElB,qBAAsBA,EACtBmB,SAAS,mDACTC,cAAeC,KC/CNC,MAxBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKH,EAAME,UAAU,WAAWE,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEF,UAAU,WACVG,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BASF,+BACE,cAAC,EAAD,UCXOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,SAM1BZ,M","file":"static/js/main.43782efb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/avatar.f630f4ee.svg\";","import { BotScript, Request } from \"@yeuai/botscript\";\nimport { Widget, renderCustomComponent } from 'react-chat-widget';\nimport { useEffect, Component } from \"react\";\nimport parse from 'html-react-parser'\n\nimport 'react-chat-widget/lib/styles.css';\nimport './Chatbox.scss';\n\nimport logo from './avatar.svg';\n\n\nconst bot = new BotScript();\nconst request = new Request();\n\n/**\n * TÃ¹y chá»‰nh custom component\n */\nclass ReplyComponent extends Component {\n  render() {\n    let msg = this.props.reply.speechResponse;\n    return <div>{parse(msg)}</div>\n  }\n}\n\n/**\n * Handle message request\n * @param {string} msg\n */\nasync function handleNewUserMessage(msg) {\n  const reply = await bot.handleAsync(request.enter(msg));\n  renderCustomComponent(ReplyComponent, {reply}, true);\n}\n\n/**\n * Init botscript\n * Load/parse according to the following priority order\n * 1. From jsx tag <BotScript id={<id>} />\n * 2. From script tag:  <script async data-botid=\"p3PkBtuA\" src=\"//chatbox.botscript.ai/embed.js\">\n * 3. From url query: ?bot=1234&action=edit\n * @param {string} botId name of bot\n */\nasync function initBot(botId) {\n  if (botId == null) {\n    // Parse bot from other location\n    // Ref: https://stackoverflow.com/a/22744637/1896897\n    if (document.querySelector('script[data-botid]') != null) {\n      botId = document.querySelector('script[data-botid]')?.getAttribute('data-botid');\n    } else {\n      // Trying to parse from url query.\n      const urlParams = new URLSearchParams(window.location.search);\n      botId = urlParams.get('bot');\n    }\n  }\n\n  if (!botId) {\n    botId = 'PKVip Test';\n  }\n\n  // Parse bot knowledge\n  bot.parse(`\n    /include:\n      - https://raw.githubusercontent.com/yeuai/botscript/master/examples/definition.bot\n      - https://raw.githubusercontent.com/yeuai/botscript/master/examples/basic.bot\n      ${botId ? '- https://botscript.ai/api/kb/' + botId : ''}\n    `);\n  await bot.init();\n}\n\nfunction Chatbox() {\n  useEffect(() => {\n    initBot();\n  });\n  return (\n    <Widget\n      handleNewUserMessage={handleNewUserMessage}\n      subtitle='ðŸ’¬Funny chat with your botðŸ¤–'\n      profileAvatar={logo}\n    />\n  );\n}\n\nexport default Chatbox;\n","import logo from './logo.svg';\nimport './App.css';\n\nimport Chatbox from \"./chatbox/Chatbox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <main>\n        <Chatbox />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}